// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"microservice/internal/core/domain/example"

	mock "github.com/stretchr/testify/mock"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// CreateEntity provides a mock function for the type MockManager
func (_mock *MockManager) CreateEntity(ctx context.Context, id string, email string, name string) (*example.Entity, error) {
	ret := _mock.Called(ctx, id, email, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntity")
	}

	var r0 *example.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*example.Entity, error)); ok {
		return returnFunc(ctx, id, email, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *example.Entity); ok {
		r0 = returnFunc(ctx, id, email, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, id, email, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_CreateEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntity'
type MockManager_CreateEntity_Call struct {
	*mock.Call
}

// CreateEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - email string
//   - name string
func (_e *MockManager_Expecter) CreateEntity(ctx interface{}, id interface{}, email interface{}, name interface{}) *MockManager_CreateEntity_Call {
	return &MockManager_CreateEntity_Call{Call: _e.mock.On("CreateEntity", ctx, id, email, name)}
}

func (_c *MockManager_CreateEntity_Call) Run(run func(ctx context.Context, id string, email string, name string)) *MockManager_CreateEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockManager_CreateEntity_Call) Return(entity *example.Entity, err error) *MockManager_CreateEntity_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockManager_CreateEntity_Call) RunAndReturn(run func(ctx context.Context, id string, email string, name string) (*example.Entity, error)) *MockManager_CreateEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntity provides a mock function for the type MockManager
func (_mock *MockManager) GetEntity(ctx context.Context, id string) (*example.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEntity")
	}

	var r0 *example.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*example.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *example.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntity'
type MockManager_GetEntity_Call struct {
	*mock.Call
}

// GetEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockManager_Expecter) GetEntity(ctx interface{}, id interface{}) *MockManager_GetEntity_Call {
	return &MockManager_GetEntity_Call{Call: _e.mock.On("GetEntity", ctx, id)}
}

func (_c *MockManager_GetEntity_Call) Run(run func(ctx context.Context, id string)) *MockManager_GetEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManager_GetEntity_Call) Return(entity *example.Entity, err error) *MockManager_GetEntity_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockManager_GetEntity_Call) RunAndReturn(run func(ctx context.Context, id string) (*example.Entity, error)) *MockManager_GetEntity_Call {
	_c.Call.Return(run)
	return _c
}
