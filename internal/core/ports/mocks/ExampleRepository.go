// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"microservice/internal/core/domain/example"

	mock "github.com/stretchr/testify/mock"
)

// NewMockExampleRepository creates a new instance of MockExampleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExampleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExampleRepository {
	mock := &MockExampleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExampleRepository is an autogenerated mock type for the ExampleRepository type
type MockExampleRepository struct {
	mock.Mock
}

type MockExampleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExampleRepository) EXPECT() *MockExampleRepository_Expecter {
	return &MockExampleRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function for the type MockExampleRepository
func (_mock *MockExampleRepository) GetByID(ctx context.Context, id string) (*example.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *example.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*example.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *example.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*example.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExampleRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockExampleRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockExampleRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockExampleRepository_GetByID_Call {
	return &MockExampleRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockExampleRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockExampleRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExampleRepository_GetByID_Call) Return(entity *example.Entity, err error) *MockExampleRepository_GetByID_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockExampleRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*example.Entity, error)) *MockExampleRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockExampleRepository
func (_mock *MockExampleRepository) Save(ctx context.Context, entity *example.Entity) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *example.Entity) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExampleRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockExampleRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *example.Entity
func (_e *MockExampleRepository_Expecter) Save(ctx interface{}, entity interface{}) *MockExampleRepository_Save_Call {
	return &MockExampleRepository_Save_Call{Call: _e.mock.On("Save", ctx, entity)}
}

func (_c *MockExampleRepository_Save_Call) Run(run func(ctx context.Context, entity *example.Entity)) *MockExampleRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *example.Entity
		if args[1] != nil {
			arg1 = args[1].(*example.Entity)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExampleRepository_Save_Call) Return(err error) *MockExampleRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExampleRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entity *example.Entity) error) *MockExampleRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
