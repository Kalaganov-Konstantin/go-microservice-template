// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"microservice/internal/platform/health"

	mock "github.com/stretchr/testify/mock"
)

// NewMockManagerInterface creates a new instance of MockManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagerInterface {
	mock := &MockManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManagerInterface is an autogenerated mock type for the ManagerInterface type
type MockManagerInterface struct {
	mock.Mock
}

type MockManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagerInterface) EXPECT() *MockManagerInterface_Expecter {
	return &MockManagerInterface_Expecter{mock: &_m.Mock}
}

// CheckAll provides a mock function for the type MockManagerInterface
func (_mock *MockManagerInterface) CheckAll(ctx context.Context) map[string]health.CheckResult {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAll")
	}

	var r0 map[string]health.CheckResult
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]health.CheckResult); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]health.CheckResult)
		}
	}
	return r0
}

// MockManagerInterface_CheckAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAll'
type MockManagerInterface_CheckAll_Call struct {
	*mock.Call
}

// CheckAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagerInterface_Expecter) CheckAll(ctx interface{}) *MockManagerInterface_CheckAll_Call {
	return &MockManagerInterface_CheckAll_Call{Call: _e.mock.On("CheckAll", ctx)}
}

func (_c *MockManagerInterface_CheckAll_Call) Run(run func(ctx context.Context)) *MockManagerInterface_CheckAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagerInterface_CheckAll_Call) Return(stringToCheckResult map[string]health.CheckResult) *MockManagerInterface_CheckAll_Call {
	_c.Call.Return(stringToCheckResult)
	return _c
}

func (_c *MockManagerInterface_CheckAll_Call) RunAndReturn(run func(ctx context.Context) map[string]health.CheckResult) *MockManagerInterface_CheckAll_Call {
	_c.Call.Return(run)
	return _c
}

// IsHealthy provides a mock function for the type MockManagerInterface
func (_mock *MockManagerInterface) IsHealthy(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockManagerInterface_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type MockManagerInterface_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagerInterface_Expecter) IsHealthy(ctx interface{}) *MockManagerInterface_IsHealthy_Call {
	return &MockManagerInterface_IsHealthy_Call{Call: _e.mock.On("IsHealthy", ctx)}
}

func (_c *MockManagerInterface_IsHealthy_Call) Run(run func(ctx context.Context)) *MockManagerInterface_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagerInterface_IsHealthy_Call) Return(b bool) *MockManagerInterface_IsHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockManagerInterface_IsHealthy_Call) RunAndReturn(run func(ctx context.Context) bool) *MockManagerInterface_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockManagerInterface
func (_mock *MockManagerInterface) Register(checker health.Checker) {
	_mock.Called(checker)
	return
}

// MockManagerInterface_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockManagerInterface_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - checker health.Checker
func (_e *MockManagerInterface_Expecter) Register(checker interface{}) *MockManagerInterface_Register_Call {
	return &MockManagerInterface_Register_Call{Call: _e.mock.On("Register", checker)}
}

func (_c *MockManagerInterface_Register_Call) Run(run func(checker health.Checker)) *MockManagerInterface_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 health.Checker
		if args[0] != nil {
			arg0 = args[0].(health.Checker)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagerInterface_Register_Call) Return() *MockManagerInterface_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManagerInterface_Register_Call) RunAndReturn(run func(checker health.Checker)) *MockManagerInterface_Register_Call {
	_c.Run(run)
	return _c
}
