services:
  # Database migrations
  migrate:
    image: migrate/migrate
    volumes:
      - ./migrations:/migrations
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=${POSTGRES_SSL_MODE}
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=${POSTGRES_SSL_MODE}", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - microservice-network

  # Microservice application
  microservice:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${HOST_SERVICE_PORT}:${HTTP_SERVER_PORT}"
    environment:
      - ENV=${ENV}
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - HTTP_SERVER_HOST=${HTTP_SERVER_HOST}
      - HTTP_SERVER_READ_TIMEOUT=${HTTP_SERVER_READ_TIMEOUT}
      - HTTP_SERVER_WRITE_TIMEOUT=${HTTP_SERVER_WRITE_TIMEOUT}
      - HTTP_SERVER_IDLE_TIMEOUT=${HTTP_SERVER_IDLE_TIMEOUT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_MAX_OPEN_CONNS=${POSTGRES_MAX_OPEN_CONNS}
      - POSTGRES_MAX_IDLE_CONNS=${POSTGRES_MAX_IDLE_CONNS}
      - POSTGRES_CONN_MAX_LIFETIME=${POSTGRES_CONN_MAX_LIFETIME}
      - POSTGRES_CONN_MAX_IDLE_TIME=${POSTGRES_CONN_MAX_IDLE_TIME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - LOGGER_LEVEL=${LOGGER_LEVEL}
      - LOGGER_FORMAT=${LOGGER_FORMAT}
      - RATE_LIMIT_GLOBAL_REQUESTS=${RATE_LIMIT_GLOBAL_REQUESTS}
      - RATE_LIMIT_GLOBAL_WINDOW=${RATE_LIMIT_GLOBAL_WINDOW}
      - RATE_LIMIT_REQUESTS_PER_IP=${RATE_LIMIT_REQUESTS_PER_IP}
      - RATE_LIMIT_WINDOW_SECONDS=${RATE_LIMIT_WINDOW_SECONDS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_EXPOSED_HEADERS=${CORS_EXPOSED_HEADERS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "/main", "-healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - microservice-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${HOST_POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - microservice-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "${HOST_REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - microservice-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${HOST_PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - microservice-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${HOST_GRAFANA_PORT}:${GRAFANA_PORT}"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./infrastructure/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    restart: unless-stopped
    networks:
      - microservice-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservice-network:
    driver: bridge
